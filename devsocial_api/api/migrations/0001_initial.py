# Generated by Django 4.2 on 2023-04-22 19:57

import api.models.post
import api.models.user
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(error_messages={'blank': 'The first name field cannot be be blank.', 'null': 'The first name field cannot be null.'})),
                ('last_name', models.CharField(error_messages={'blank': 'The last name field cannot be be blank.', 'null': 'The last name field cannot be null.'})),
                ('email', models.EmailField(error_messages={'invalid': 'Enter a valid email address.', 'unique': 'This email address is already registered.'}, max_length=254, unique=True)),
                ('password', models.CharField(error_messages={'blank': 'The password field cannot be be blank.', 'null': 'The password field cannot be null.'}, validators=[django.core.validators.RegexValidator(message='Password must be at least 8 characters long, and contain at least one uppercase letter, one lowercase letter, one digit, and one special character.', regex='^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+]).{8,}$')])),
                ('confirm_password', models.CharField(error_messages={'blank': 'The confirm password field cannot be be blank.', 'null': 'The confirm password field cannot be null.'})),
                ('bio', models.CharField(error_messages={'blank': 'The bio field cannot be be blank.', 'null': 'The bio field cannot be null.'})),
                ('location', models.CharField(error_messages={'blank': 'The location field cannot be be blank.', 'null': 'The location field cannot be null.'})),
                ('occupation', models.CharField(error_messages={'blank': 'The occupation field cannot be be blank.', 'null': 'The occupation field cannot be null.'})),
                ('github_url', models.CharField(error_messages={'blank': 'The Github URL field cannot be be blank.', 'null': 'The Github URL field cannot be null.'})),
                ('linkedin_url', models.CharField(error_messages={'blank': 'The LinkedIn URL field cannot be be blank.', 'null': 'The LinkedIn URL field cannot be null.'})),
                ('image', models.ImageField(error_messages={'blank': 'The image field cannot be be blank.', 'null': 'The image field cannot be null.'}, upload_to='images/', validators=[api.models.user.validate_image])),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(error_messages={'blank': 'The content field cannot be be blank.', 'null': 'The content field cannot be null.'})),
                ('github_url', models.CharField(error_messages={'blank': 'The github url field cannot be be blank.', 'null': 'The github url field cannot be null.'})),
                ('demo_url', models.CharField(error_messages={'blank': 'The demo url field cannot be be blank.', 'null': 'The demo url field cannot be null.'})),
                ('caption', models.CharField(error_messages={'blank': 'The caption field cannot be be blank.', 'null': 'The caption field cannot be null.'})),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/', validators=[api.models.post.validate_image])),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.post')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(error_messages={'blank': 'The comment field cannot be be blank.', 'null': 'The comment field cannot be null.'})),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.post')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user')),
            ],
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friend_id', models.IntegerField()),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user')),
            ],
            options={
                'unique_together': {('user_id', 'friend_id')},
            },
        ),
    ]
